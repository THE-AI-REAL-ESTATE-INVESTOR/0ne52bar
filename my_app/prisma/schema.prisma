generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// TEST MODELS - NOT PART OF THE ACTUAL APPLICATIONThese models were created for testing the ts2prisma generator.They should not be included in the final schema./
/// Example model for testing the TypeScript-to-Prisma Schema GeneratorThis file demonstrates how the generator can automatically convert TypeScriptinterfaces to Prisma models with proper relationships/
/// Represents a tag that can be applied to various content@prisma.model/
model TestTag {
  /// Unique identifier for the tag/
  id        String   @id @default(cuid())
  /// Tag name/
  name      String
  /// When the tag was created/
  createdAt DateTime @default(now())
  /// Color code for the tag/
  colorHex  String
}

/// Represents a category for blog posts/
model TestCategory {
  /// Unique identifier for the category/
  id          String     @id @default(cuid())
  /// Category name/
  name        String
  /// Category description/
  description String?
  posts       TestPost[]
}

/// Represents a user in the system/
model TestUser {
  /// Unique identifier for the user/
  id               String             @id @default(cuid())
  /// User's full name/
  name             String
  /// User's email address/
  email            String             @unique
  /// Whether the user is active/
  isActive         Boolean
  /// User's registration date/
  createdAt        DateTime           @default(now())
  TestAddress      TestAddress[]
  TestAlert        TestAlert[]
  TestComment      TestComment[]
  TestNotification TestNotification[]
  TestOrder        TestOrder[]
  posts            TestPost[]
  TestReview       TestReview[]
  TestSubscription TestSubscription[]
}

/// Represents a blog post/
model TestPost {
  /// Unique identifier for the post/
  id             String        @id @default(cuid())
  /// Post title/
  title          String
  /// Main content of the post/
  content        String
  /// Whether the post is published/
  published      Boolean
  /// Publication date/
  publishedAt    DateTime?
  /// User ID who wrote this post/
  authorId       String
  /// Tags associated with this post/
  tags           String[]
  /// Category ID this post belongs to/
  categoryId     String
  testUserId     String
  testCategoryId String
  TestComment    TestComment[]
  category       TestCategory  @relation(fields: [testCategoryId], references: [id])
  author         TestUser      @relation(fields: [testUserId], references: [id])
}

/// Represents a comment on a post/
model TestComment {
  /// Unique identifier for the comment/
  id         String   @id @default(cuid())
  /// Comment text/
  text       String
  /// When the comment was created/
  createdAt  DateTime @default(now())
  /// ID of the post this comment belongs to/
  postId     String
  /// ID of the user who wrote this comment/
  authorId   String
  testPostId String
  testUserId String
  post       TestPost @relation(fields: [testPostId], references: [id])
  author     TestUser @relation(fields: [testUserId], references: [id])
}

/// Represents a product in an e-commerce system@prisma.model/
model TestProduct {
  /// Unique identifier for the product/
  id            String          @id @default(cuid())
  /// Product name/
  name          String
  /// Product description/
  description   String
  /// Product price/
  price         Int
  /// Stock quantity/
  stock         Int
  /// Whether the product is available/
  isAvailable   Boolean
  /// When the product was created/
  createdAt     DateTime        @default(now())
  /// When the product was last updated/
  updatedAt     DateTime?       @updatedAt
  TestOrderItem TestOrderItem[]
  TestReview    TestReview[]
}

/// Represents a customer order in the e-commerce system@prisma.model/
model TestOrder {
  /// Unique identifier for the order/
  id          String          @id @default(cuid())
  /// Current status of the order/
  status      String
  /// Total amount of the order/
  totalAmount Int
  /// Customer who placed the order/
  customerId  String
  /// When the order was placed/
  orderDate   DateTime
  /// When the order was last updated/
  updatedAt   DateTime?       @updatedAt
  testUserId  String
  customer    TestUser        @relation(fields: [testUserId], references: [id])
  items       TestOrderItem[]
  TestPayment TestPayment[]
}

/// Represents an item in a customer order@prisma.model/
model TestOrderItem {
  /// Unique identifier for the order item/
  id            String      @id @default(cuid())
  /// Order this item belongs to/
  orderId       String
  /// Product in this order item/
  productId     String
  /// Quantity ordered/
  quantity      Int
  /// Price at time of order/
  unitPrice     Int
  testOrderId   String
  testProductId String
  order         TestOrder   @relation(fields: [testOrderId], references: [id])
  product       TestProduct @relation(fields: [testProductId], references: [id])
}

/// Represents a product review@prisma.model/
model TestReview {
  /// Unique identifier for the review/
  id            String      @id @default(cuid())
  /// Rating from 1-5/
  rating        Int
  /// Review title/
  title         String
  /// Review text/
  content       String
  /// Product being reviewed/
  productId     String
  /// User who wrote the review/
  authorId      String
  /// Whether the review is verified/
  isVerified    Boolean
  /// When the review was written/
  createdAt     DateTime    @default(now())
  testProductId String
  testUserId    String
  product       TestProduct @relation(fields: [testProductId], references: [id])
  author        TestUser    @relation(fields: [testUserId], references: [id])
}

/// Represents a shipping or billing address@prisma.model/
model TestAddress {
  /// Unique identifier for the address/
  id          String   @id @default(cuid())
  /// Street address/
  street      String
  /// City/
  city        String
  /// State or province/
  state       String
  /// Postal code/
  postalCode  String
  /// Country/
  country     String
  /// Associated user/
  userId      String
  /// Whether this is the default address/
  isDefault   Boolean
  /// Address type (shipping/billing)/
  addressType String
  testUserId  String
  user        TestUser @relation(fields: [testUserId], references: [id])
}

/// Represents a payment for an order@prisma.model/
model TestPayment {
  /// Unique identifier for the payment/
  id            String    @id @default(cuid())
  /// Associated order/
  orderId       String
  /// Payment amount/
  amount        Int
  /// Payment method (credit card, PayPal, etc.)/
  method        String
  /// Payment status/
  status        String
  /// Transaction ID from payment processor/
  transactionId String
  /// When the payment was processed/
  processedAt   DateTime
  /// Additional payment details as JSON/
  details       String?
  testOrderId   String
  order         TestOrder @relation(fields: [testOrderId], references: [id])
}

/// Represents a subscription for a user@prisma.model/
model TestSubscription {
  /// Unique identifier for the subscription/
  id            String    @id @default(cuid())
  /// Name of the subscription plan/
  planName      String
  /// Price per billing period/
  price         Int
  /// How often the user is billed (monthly, yearly, etc.)/
  billingPeriod String
  /// When the subscription started/
  startDate     DateTime
  /// When the subscription ends or renews/
  endDate       DateTime
  /// Whether the subscription renews automatically/
  autoRenew     Boolean
  /// Current status of the subscription/
  status        String
  /// User who owns this subscription/
  userId        String
  /// When the subscription was last updated/
  updatedAt     DateTime? @updatedAt
  testUserId    String
  user          TestUser  @relation(fields: [testUserId], references: [id])
}

/// Represents a notification sent to a user@prisma.model/
model TestNotification {
  /// Unique identifier for the notification/
  id         String    @id @default(cuid())
  /// Type of notification (email, push, in-app)/
  type       String
  /// Notification title/
  title      String
  /// Notification message/
  message    String
  /// Whether the notification has been read/
  isRead     Boolean
  /// When the notification was created/
  createdAt  DateTime  @default(now())
  /// When the notification was read/
  readAt     DateTime?
  /// User who received the notification/
  userId     String
  testUserId String
  user       TestUser  @relation(fields: [testUserId], references: [id])
}

/// Represents a system alert to administrators@prisma.model/
model TestAlert {
  /// Unique identifier for the alert/
  id               String    @id @default(cuid())
  /// Severity level (info, warning, error, critical)/
  severity         String
  /// Alert message/
  message          String
  /// When the alert was triggered/
  createdAt        DateTime  @default(now())
  /// Whether the alert has been acknowledged/
  acknowledged     Boolean
  /// When the alert was acknowledged/
  acknowledgedAt   DateTime?
  /// Who acknowledged the alert/
  acknowledgedById String?
  testUserId       String
  acknowledgedBy   TestUser  @relation(fields: [testUserId], references: [id])
}

model UserData {
  id      String  @id @default(cuid())
  name    String
  email   String? @unique
  picture String?
}

model FacebookPage {
  id           String   @id @default(cuid())
  name         String
  access_token String
  category     String?
  tasks        String[]
}

model ApiResponse {
  id     String  @id @default(cuid())
  status String?
  data   Json?
  error  String?
}

model FacebookSDK {
  id             String   @id @default(cuid())
  init           String
  getLoginStatus String
  login          String
  logout         String
  api            String
  Window         Window[]
}

model Window {
  id            String      @id @default(cuid())
  fbAsyncInit   String?
  facebookSDKId String
  FB            FacebookSDK @relation(fields: [facebookSDKId], references: [id])
}

/// Types for our form data
model TapPassFormData {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  birthday     String
  phoneNumber  String
  agreeToTerms Boolean
}

/// Member data type including additional fields for storage
model TapPassMember {
  id          String  @id @default(cuid())
  memberId    String
  memberSince String
  tier        String
  points      Int
  visits      Int
  lastVisit   String?
}

/// Define card types for the dashboard
model AdminCard {
  id          String  @id @default(cuid())
  title       String
  description String
  icon        String
  link        String
  implemented Boolean
}

/// Event type definitions/
model Event {
  id               String          @id @default(cuid())
  title            String
  date             String
  time             String
  description      String
  image            String
  facebookEventUrl String?
  eventTagId       String?
  EventTag         EventTag?       @relation(fields: [eventTagId], references: [id])
  EventAttendee    EventAttendee[]
}

model MenuItem {
  id          String  @id @default(cuid())
  name        String
  price       String
  category    String
  description String?
}

model Category {
  id   String @id @default(cuid())
  name String
}

/// Business information types/
model BusinessHours {
  id                 String            @id @default(cuid())
  day                String
  hours              String
  businessSettingsId String?
  businessInfoId     String?
  BusinessInfo       BusinessInfo?     @relation(fields: [businessInfoId], references: [id])
  BusinessSettings   BusinessSettings? @relation(fields: [businessSettingsId], references: [id])
}

model BusinessSettings {
  id           String          @id @default(cuid())
  businessName String
  address      String
  phoneNumber  String
  email        String          @unique
  aboutText    String
  socialMedia  String
  hours        BusinessHours[]
}

/// Define the type for our params
model SlugParams {
  id   String   @id @default(cuid())
  slug String[]
}

/// Define the params type for this page
model EventParams {
  id String @id @default(cuid())
}

/// Type for form data
model FormData {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  birthday     String
  phoneNumber  String  @unique
  agreeToTerms Boolean
}

/// Type for login data
model LoginData {
  id    String @id @default(cuid())
  email String @unique
}

/// Type definitions for server action responses
model RegisterResponse {
  id       String  @id @default(cuid())
  success  Boolean
  memberId String
  error    String?
}

model EmailResponse {
  id      String  @id @default(cuid())
  success Boolean
  error   String?
}

model CreateMemberParams {
  id       String @id @default(cuid())
  data     String
  memberId String
}

model FindMemberParams {
  id          String  @id @default(cuid())
  email       String? @unique
  phoneNumber String? @unique
  memberId    String?
}

/// Add this interface for Facebook event data
model FacebookEvent {
  id                       String                  @id @default(cuid())
  name                     String
  description              String?
  start_time               String
  end_time                 String?
  place                    String?
  cover                    String?
  event_times              Json?
  facebookEventsResponseId String?
  FacebookEventsResponse   FacebookEventsResponse? @relation(fields: [facebookEventsResponseId], references: [id])
}

model FacebookEventsResponse {
  id     String          @id @default(cuid())
  error  String?
  events FacebookEvent[]
}

/// Represents amenities offered by the business@prisma.model/
model BusinessAmenity {
  /// Unique identifier for the amenity/
  id             String       @id @default(cuid())
  /// Name of the amenity/
  name           String
  /// Description of the amenity/
  description    String?
  /// Reference to the business info this entry belongs to/
  businessInfoId String
  businessInfo   BusinessInfo @relation(fields: [businessInfoId], references: [id])
}

model BusinessInfo {
  id              String            @id @default(cuid())
  name            String
  description     String
  address         String
  phone           String
  amenities       String[]
  BusinessAmenity BusinessAmenity[]
  hours           BusinessHours[]
}

/// Event type definitions/
/// Represents an event tag for categorization@prisma.model/
model EventTag {
  /// Unique identifier/
  id     String  @id @default(cuid())
  /// Tag name/
  name   String
  /// Tag color/
  color  String?
  events Event[]
}

/// Represents an event attendee for registration tracking@prisma.model/
model EventAttendee {
  /// Unique identifier/
  id           String   @id @default(cuid())
  /// Attendee name/
  name         String
  /// Attendee email/
  email        String   @unique
  /// Number of guests/
  guestCount   Int
  /// Event the attendee is registered for/
  eventId      String
  /// Registration date/
  registeredAt DateTime
  event        Event    @relation(fields: [eventId], references: [id])
}

/// User model definitions/
/// Represents a user's permission@prisma.model/
model Permission {
  /// Unique identifier/
  id          String @id @default(cuid())
  /// Permission name (e.g., "manage_events")/
  name        String
  /// Permission description/
  description String
  roles       Role[] @relation("PermissionToRole")
}

/// Represents a user role@prisma.model/
model Role {
  /// Unique identifier/
  id          String       @id @default(cuid())
  /// Role name (e.g., "admin", "editor")/
  name        String
  /// Role description/
  description String
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

/// Represents an account linked to a user (for OAuth)@prisma.model/
model Account {
  /// Unique identifier/
  id                String  @id @default(cuid())
  /// User ID/
  userId            String
  /// Provider type (oauth, email, etc)/
  type              String
  /// Provider name (google, facebook, etc)/
  provider          String
  /// Provider account ID/
  providerAccountId String
  /// Provider refresh token/
  refresh_token     String?
  /// Provider access token/
  access_token      String?
  /// Access token expires at time/
  expires_at        Int?
  /// Provider token type/
  token_type        String?
  /// Provider scope/
  scope             String?
  /// Provider ID token/
  id_token          String?
  /// Provider session state/
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

/// Represents a user session@prisma.model/
model Session {
  /// Unique identifier/
  id           String   @id @default(cuid())
  /// Session token/
  sessionToken String
  /// User ID/
  userId       String
  /// Expiration date/
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

/// Represents a verification request@prisma.model/
model VerificationToken {
  id         String   @id @default(cuid())
  /// Identifier - the email or phone/
  identifier String
  /// The token/
  token      String
  /// Expiration date/
  expires    DateTime
}

/// Represents a user@prisma.model/
model User {
  /// Unique identifier/
  id            String    @id @default(cuid())
  /// User's name/
  name          String?
  /// User's email/
  email         String?   @unique
  /// User's email verified timestamp/
  emailVerified DateTime?
  /// User's profile image/
  image         String?
  /// When the user was created/
  createdAt     DateTime  @default(now())
  /// When the user was updated/
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  roles         Role[]    @relation("RoleToUser")
}

/// Define the TapPass membership levels
enum MembershipLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

/// Represents a TapPass member
model Member {
  /// Unique identifier for the member
  id             String         @id @default(cuid())
  /// Member's unique ID code (e.g., ONE52-1234-5678)
  memberId       String         @unique
  /// Member's full name
  name           String
  /// Member's email address
  email          String         @unique
  /// Member's phone number
  phoneNumber    String
  /// Member's birthday
  birthday       DateTime
  /// Whether the member agreed to terms
  agreeToTerms   Boolean        @default(true)
  /// Member's current membership level
  membershipLevel MembershipLevel @default(BRONZE)
  /// Date the member joined
  joinDate       DateTime       @default(now())
  /// Total points accumulated
  points         Int            @default(0)
  /// Total visits
  visits         Int            @default(0)
  /// Date of last visit
  lastVisit      DateTime?
  /// When the member was created
  createdAt      DateTime       @default(now())
  /// When the member was updated
  updatedAt      DateTime       @updatedAt
  /// Member's visit history
  visitHistory   Visit[]
  /// Member's rewards
  rewards        Reward[]
}

/// Represents a member visit
model Visit {
  /// Unique identifier for the visit
  id        String   @id @default(cuid())
  /// Member who made the visit
  member    Member   @relation(fields: [memberId], references: [id])
  /// Member ID
  memberId  String
  /// Date of the visit
  visitDate DateTime @default(now())
  /// Amount spent during the visit
  amount    Float    @default(0)
  /// Points earned from the visit
  points    Int      @default(0)
  /// When the visit was created
  createdAt DateTime @default(now())
}

/// Represents a member reward
model Reward {
  /// Unique identifier for the reward
  id          String    @id @default(cuid())
  /// Member who owns the reward
  member      Member    @relation(fields: [memberId], references: [id])
  /// Member ID
  memberId    String
  /// Type of reward
  rewardType  String
  /// Description of the reward
  description String
  /// Value of the reward
  value       Float
  /// Whether the reward has been redeemed
  isRedeemed  Boolean   @default(false)
  /// When the reward was redeemed
  redeemedAt  DateTime?
  /// When the reward expires (null if it doesn't expire)
  expiresAt   DateTime?
  /// When the reward was created
  createdAt   DateTime  @default(now())
  /// When the reward was updated
  updatedAt   DateTime  @updatedAt
}
