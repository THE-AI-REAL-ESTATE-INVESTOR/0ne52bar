generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Member data type including additional fields for storage
model TapPassMember {
  id          String  @id @default(cuid())
  memberId    String
  memberSince String
  tier        String
  points      Int
  visits      Int
  lastVisit   String?
}

/// Types for our form data
model TapPassFormData {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  birthday     String
  phoneNumber  String
  agreeToTerms Boolean
}

/// Event type definitions
model Event {
  id               String          @id @default(cuid())
  title            String
  date             String
  time             String
  description      String
  image            String
  facebookEventUrl String?
  eventTagId       String?
  EventTag         EventTag?       @relation(fields: [eventTagId], references: [id])
  EventAttendee    EventAttendee[]
}

model EventTag {
  id     String  @id @default(cuid())
  name   String
  color  String
  Event  Event[]
}

model EventAttendee {
  id      String @id @default(cuid())
  name    String
  email   String
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
}

/// Menu models
model MenuItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       String
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(100)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  sortOrder   Int        @default(100)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  items       MenuItem[]
}

/// Merchandise models
model Merchandise {
  id          String              @id @default(cuid())
  name        String
  description String
  price       String
  imagePath   String?
  inStock     Boolean            @default(false)
  comingSoon  Boolean            @default(true)
  sortOrder   Int                @default(100)
  categoryId  String
  category    MerchandiseCategory @relation(fields: [categoryId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model MerchandiseCategory {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  items       Merchandise[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

/// Business information types
model BusinessHours {
  id             String       @id @default(cuid())
  day            String
  hours          String
  businessInfoId String?     // Keep optional for now
  BusinessInfo   BusinessInfo? @relation(fields: [businessInfoId], references: [id])
}

model BusinessInfo {
  id          String          @id @default(cuid())
  name        String
  description String
  address     String
  phone       String
  email       String          @unique
  hours       BusinessHours[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
}

/// Authentication models - required for admin functionality
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
