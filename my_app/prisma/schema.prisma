generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// This schema was automatically generated from TypeScript types
// Generated on 2025-03-15T19:57:38.982Z
// DO NOT EDIT THIS FILE DIRECTLY

model UserData {
  id String @id @default(cuid())
    name String
    email String? @unique
    picture String?
}

model FacebookPage {
    id String @id @default(cuid())
    name String
    access_token String
    category String?
    tasks String[]?
}

model ApiResponse {
  id String @id @default(cuid())
    status String?
    data Json?
    error String?
}

model FacebookSDK {
  id String @id @default(cuid())
    init String
    getLoginStatus String
    login String
    logout String
    api String
    api String
    api String
}

model Window {
  id String @id @default(cuid())
    FB FacebookSDK
    fbAsyncInit String?
}

/// Types for our form data
model TapPassFormData {
  id String @id @default(cuid())
    name String
    email String @unique
    birthday String
    phoneNumber String @unique
    agreeToTerms Boolean
}

/// Member data type including additional fields for storage
model TapPassMember {
  id String @id @default(cuid())
    memberId String @unique
    memberSince String
    tier String
    points Int
    visits Int
    lastVisit String?
}

/// Define card types for the dashboard
model AdminCard {
  id String @id @default(cuid())
    title String
    description String
    icon String
    link String
    implemented Boolean
}

/// Event type definitions/
model Event {
    id String @id @default(cuid())
    title String
    date String
    time String
    description String
    image String
    facebookEventUrl String?
}

model MenuItem {
    id String @id @default(cuid())
    name String
    price String
    category String
    description String?
}

model Category {
    id String @id @default(cuid())
    name String
}

/// Business information types/
model BusinessHours {
  id String @id @default(cuid())
    day String
    hours String
}

model BusinessSettings {
  id String @id @default(cuid())
    businessName String
    address String
    phoneNumber String @unique
    email String @unique
    aboutText String
    hours BusinessHours[]
    socialMedia String
}

/// Define the type for our params
model SlugParams {
  id String @id @default(cuid())
    slug String[]?
}

/// Define the params type for this page
model EventParams {
    id String @id @default(cuid())
}

/// Type for form data
model FormData {
  id String @id @default(cuid())
    name String
    email String @unique
    birthday String
    phoneNumber String @unique
    agreeToTerms Boolean
}

/// Type for login data
model LoginData {
  id String @id @default(cuid())
    email String @unique
}

/// Type definitions for server action responses
model RegisterResponse {
  id String @id @default(cuid())
    success Boolean
    memberId String @unique
    error String?
}

model EmailResponse {
  id String @id @default(cuid())
    success Boolean
    error String?
}

model CreateMemberParams {
  id String @id @default(cuid())
    data String
    memberId String @unique
}

model FindMemberParams {
  id String @id @default(cuid())
    email String? @unique
    phoneNumber String? @unique
    memberId String? @unique
}

/// Add this interface for Facebook event data
model FacebookEvent {
    id String @id @default(cuid())
    name String
    description String?
    start_time String
    end_time String?
    place String?
    cover String?
    event_times Json?
}

model FacebookEventsResponse {
  id String @id @default(cuid())
    error String?
    events FacebookEvent[]
}

model BusinessInfo {
  id String @id @default(cuid())
    name String
    description String
    address String
    phone String
    hours BusinessHours[]
    amenities String[]
}
